"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return CoreConfigHandler}});class CoreConfigHandler{generateClientConfig(UIClientConfig){let config={policy:new Object,log:new Object,inbounds:new Object,outbounds:new Object,stats:new Object,api:new Object,routing:new Object};config.policy={system:{statsOutboundUplink:true,statsOutboundDownlink:true}};config.log={access:"",error:"",loglevel:"warning"};config.api={tag:"api",services:["StatsService"]};config.inbounds=[{tag:"socks",port:UIClientConfig.InboundSocksPort,listen:"127.0.0.1",protocol:"socks",sniffing:{enabled:UIClientConfig.sniffingEnabled,destOverride:["http","tls"]},settings:{auth:"noauth",udp:UIClientConfig.udpEnabled,allowTransparent:false}},{tag:"http",port:UIClientConfig.InboundHttpPort,listen:"127.0.0.1",protocol:"http",sniffing:{enabled:UIClientConfig.sniffingEnabled,destOverride:["http","tls"]},settings:{auth:"noauth",udp:UIClientConfig.udpEnabled,allowTransparent:false}},{tag:"api",port:UIClientConfig.InboundApiPort,listen:"127.0.0.1",protocol:"dokodemo-door",settings:{udp:false,address:"127.0.0.1",allowTransparent:false}}];config.outbounds=[{tag:"proxy",protocol:UIClientConfig.OutboundProtocol,settings:{vnext:[{address:UIClientConfig.OutboundRemoteHost,port:UIClientConfig.OutboundRemotePort,users:[{id:UIClientConfig.OutboundUUID,alterId:UIClientConfig.OutboundAlterId,email:"user@example.com",security:UIClientConfig.OutboundEncryption,encryption:"none"}]}]},streamSettings:{network:UIClientConfig.OutboundStreamType,security:UIClientConfig.OutboundStreamSecurity,tlsSettings:{allowInsecure:false,serverName:UIClientConfig.OutboundHost},[UIClientConfig.OutboundStreamType+"Settings"]:{path:UIClientConfig.OutboundPath,headers:{Host:UIClientConfig.OutboundHost}}},mux:{enabled:UIClientConfig.muxEnabled,concurrency:-1}},{tag:"direct",protocol:"freedom",settings:{}},{tag:"block",protocol:"blackhole",settings:{response:{type:"http"}}}];config.routing={domainStrategy:"AsIs",domainMatcher:"mph",rules:[{type:"field",inboundTag:["api"],outboundTag:"api",enabled:true},{type:"field",outboundTag:"direct",domain:["geosite:cn"],enabled:true},{type:"field",inboundTag:[],outboundTag:"direct",ip:["geoip:private","geoip:cn"],enabled:true},{type:"field",port:"0-65535",outboundTag:"proxy",enabled:true}]};return config}generateServerConfig(UIServerConfig){let config={policy:new Object,log:new Object,inbounds:new Object,outbounds:new Object,stats:new Object,api:new Object,routing:new Object,dns:new Object};config.log={access:"",error:"",loglevel:"warning"};config.api={tag:"api",services:[]};if(UIServerConfig.InboundCustom){config.outbounds=UIServerConfig.InboundCustom}else{config.inbounds=[{port:UIServerConfig.InboundPort,listen:UIServerConfig.InboundAddress,protocol:UIServerConfig.InboundProtocol,settings:{clients:[{id:UIServerConfig.InboundUUID,level:0,email:"user@exmaple.com"}],decryption:"none"},streamSettings:{network:UIServerConfig.InboundStreamType,security:UIServerConfig.InboundStreamSecurity,[UIServerConfig.InboundStreamType+"Settings"]:{path:UIServerConfig.InboundPath}},sniffing:{enabled:UIServerConfig.sniffingEnabled,destOverride:["http","tls","quic"],metadataOnly:false},tag:"main"}];if(UIServerConfig.InboundStreamType==="xhttp"){config.inbounds[0].streamSettings.xhttpSettings={path:UIServerConfig.InboundPath,mode:UIServerConfig.InboundXHTTPMode,extra:UIServerConfig.InboundXHTTPExtra}}if(UIServerConfig.InboundStreamSecurity==="reality"){config.inbounds[0].streamSettings.realitySettings=UIServerConfig.InboundRealityExtra}}if(UIServerConfig.DnsServerCustom){config.dns={servers:UIServerConfig.DnsServerCustom}}else{config.dns={servers:["https+local://1.1.1.1/dns-query","8.8.8.8"]}}if(UIServerConfig.OutboundCustom){config.outbounds=UIServerConfig.OutboundCustom}else{config.outbounds=[{protocol:"freedom",settings:{}},{protocol:"blackhole",settings:{},tag:"blocked"}]}if(UIServerConfig.RoutingCustom){config.routing=UIServerConfig.RoutingCustom}else{config.routing={rules:[{inboundTag:["api"],outboundTag:"api",type:"field"},{outboundTag:"blocked",protocol:["bittorrent"],type:"field"}]}}return config}}